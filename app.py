from flask import Flask, request, render_template, redirect
import os
import requests
from hash_utils import generate_file_hash

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

VIRUSTOTAL_API_KEY = '74b0dfda1eca11e03d3b4afe802ba919f1e031b57a6da469248b87835a786259'

VULNERABILITY_PATTERNS = [
    'eval(',
    'exec(',
    'os.system(',
    'subprocess.Popen(',
]

def scan_file(file_path):
    with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:
        content = file.read()
        for pattern in VULNERABILITY_PATTERNS:
            if pattern in content:
                return True
    return False

def check_virustotal(file_hash):
    url = f'https://www.virustotal.com/api/v3/files/{file_hash}'
    headers = {
        'x-apikey': VIRUSTOTAL_API_KEY
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    return None

def get_attack_tactic(file_hash):
    url = f'https://www.virustotal.com/api/v3/files/{file_hash}/behaviour_mitre_trees'
    headers = {
        "accept": "application/json",
        "x-apikey": VIRUSTOTAL_API_KEY
    }
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        attack_tactic = response.json()
        
        tactics = attack_tactic.get('data', {}).get('CAPA', {}).get('tactics', [])
        result = []
        
        for tactic in tactics:
            tactic_info = {
                "id": tactic.get('id'),
                "name": tactic.get('name'),
                "techniques": []
            }
            techniques = tactic.get('techniques', [])
            for technique in techniques:
                tactic_info['techniques'].append({
                    "id": technique.get('id'),
                    "name": technique.get('name')
                })
            result.append(tactic_info)
        
        return result
    
    except requests.ConnectionError:
        print("Failed to connect to VirusTotal")
        return []
    except requests.HTTPError as e:
        print(f"HTTP error occurred: {e}")
        return []
    except Exception as e:
        print(f"An error occurred: {e}")
        return []

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return redirect(request.url)
    file = request.files['file']
    if file.filename == '':
        return redirect(request.url)
    
    file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
    file.save(file_path)
    
    has_vulnerability = scan_file(file_path)
    file_hash = generate_file_hash(file_path)
    virustotal_result = check_virustotal(file_hash)
    tactics_data = get_attack_tactic(file_hash)
    os.remove(file_path)
    
    return render_template('output.html', has_vulnerability=has_vulnerability, virustotal_result=virustotal_result, tactics_data=tactics_data)

if __name__ == '__main__':
    app.run(debug=True)
